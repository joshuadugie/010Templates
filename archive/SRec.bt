//------------------------------------------------
//--- 010 Editor v5.0 Binary Template
//
//      File: SRec.bt
//   Authors: Mario Ghecea
//   Version: 1.1
//   Purpose: Motorola S-REC format template. This should work 
//            with the S-REC formats based on S1-S9. 
//  Category: Electronics
// File Mask: *.s37,*.s28,*.s19
//  ID Bytes: 53 30 //S0
//   History: 
//   1.1   2016-02-12 SweetScape Software: Added some coloring, handle different linefeeds, 
//                                         custom read function and updated header for repository submission.
//   1.0   M Ghecea: Initial release.
//------------------------------------------------

typedef char RECORDTYPE [2];
typedef char COUNT [2];
typedef char ADDRESS16  [4];
typedef char ADDRESS24  [6];
typedef char ADDRESS32  [8];
typedef char CHECKSUM   [2];

local char hexval [10];
local uint addrwidth;
local uint rec = 1;

typedef struct
{
    RECORDTYPE recordType <bgcolor=cLtPurple>;
    COUNT count <bgcolor=cLtGray>;
    switch(recordType)
    {
        case "S0": // header           
        case "S1": // 16-bit address record
        case "S5": // total record count
        case "S9": // termination 16-bit 
            ADDRESS16 address16 <bgcolor=cLtAqua>;
            addrwidth = 4;
            break;
        case "S2":  // 24-bit address record
        case "S8":  // termination 24-bit
            ADDRESS24 address24 <bgcolor=cLtAqua>;
            addrwidth = 6;
            break;
        case "S3": // 32-bit address record
        case "S7": // termination 32-bit
            ADDRESS32 adress32 <bgcolor=cLtAqua>;
            addrwidth = 8;
            break;
        //case "S4":        
        //case "S6": 
        default:
            break;     
    }

    local int i;
    local int intval = 0;
    local uint pow = 0;
    local uint hexlen = 2;
    local uint digit = 0;
    for (i = 0; i < hexlen; i ++)
    {             
        digit = (count[i] - '0' > 9) ? count[i] - '7' : count[i] - '0';
        intval += ((uint32) digit * (1 << 4 * ((hexlen - 1) - i)));
    }    
    local uint bytesPerLine = (uint32) ((intval - 1) * 2) - addrwidth;    
    if (bytesPerLine != 0)
        char data [(bytesPerLine)];
    //Printf("rec# %d bpl: %d %X count : %s\n\r", rec++, bytesPerLine, intval, count);
    char checksum [2] <bgcolor=cLtGray>;
}SREC <read=ReadSREC>;

// Display record type in the value column
string ReadSREC( struct SREC &s )
{
    switch(s.recordType)
    {
        case "S0": // header           
            return "Header";
        case "S1": // 16-bit address record
        case "S2": // 24-bit address record
        case "S3": // 32-bit address record
            return "Data";
        case "S5": // total record count
        case "S6": // total record count
            return "Count";
        case "S9": // termination 16-bit 
        case "S8": // termination 24-bit
        case "S7": // termination 32-bit
            return "Termination";
    }
    return "";
}

// Handle different linefeed styles
local int64 line, lineCount = TextGetNumLines();
for( line = 0; line < lineCount; line++ )
{
    FSeek( TextLineToAddress(line) );
    if( TextGetLineSize(line,false) > 0 ) // skip empty lines
        SREC srec;
}