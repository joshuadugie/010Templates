//------------------------------------------------
//--- 010 Editor v9.0 Binary Template
//
//      File: Bash.bt
//   Authors: SweetScape Software
//   Version: 1.0
//   Purpose: Syntax highlighting for Bash shell files.
//  Category: Syntax
// File Mask: *.sh,*.bash,*.bsh,*.csh,*.bashrc,*.bash_profile,*.profile
//  ID Bytes: 
//   History: 
//   1.0   2018-10-17 SweetScape Software: Initial version.
//------------------------------------------------
RequiresVersion( 9 );

// To save memory, allow a single copy of this template to provide 
//  syntax highlighting for all open files that match the file mask.
HighlightAllowInstanceSharing( true );

// Get list of coloring styles
local int commentStyle  = HighlightFindStyle( "code-comment" );
local int keywordStyle  = HighlightFindStyle( "code-keyword" );
local int dataTypeStyle = HighlightFindStyle( "code-data-type" );
local int stringStyle   = HighlightFindStyle( "code-string" );

// Types of rules we may be applying that may span multiple lines
const int RULE_NONE              = 0;

// Build list of keywords
local TKeywordList keywordList = HighlightBuildKeywordList( HIGHLIGHT_WHOLEWORD,
"alias", "apropos", "apt-get", "aptitude", "aspell", "awk", "basename", "bash", "bc", 
"bg", "bind", "break", "builtin", "bzip2", "cal", "caller", "case", "cat", "cd", 
"cfdisk", "chattr", "chgrp", "chkconfig", "chmod", "chown", "chroot", "cksum", 
"clear", "cmp", "comm", "command", "compgen", "complete", "compopt", "continue", 
"cp", "cron", "crontab", "csplit", "curl", "cut", "date", "dc", "dd", "ddrescue", 
"declare", "df", "diff", "diff3", "dig", "dir", "dircolors", "dirname", "dirs", 
"disown", "dmesg", "do", "done", "du", "echo", "egrep", "eject", "elif", "else", 
"enable", "env", "esac", "ethtool", "eval", "exec", "exit", "expand", "expect", 
"export", "expr", "false", "fc", "fdformat", "fdisk", "fg", "fgrep", "fi", "file", 
"find", "fmt", "fold", "for", "format", "free", "fsck", "ftp", "function", "fuser", 
"gawk", "getopts", "grep", "groupadd", "groupdel", "groupmod", "groups", "gzip", 
"hash", "head", "help", "history", "hostname", "htop", "id", "if", "ifconfig", 
"ifdown", "ifup", "import", "in", "install", "iostat", "ip", "jobs", "join", "kill", 
"killall", "less", "let", "link", "ln", "local", "locate", "logname", "logout", 
"look", "lpc", "lpr", "lprint", "lprintd", "lprintq", "lprm", "ls", "lsattr", 
"lsblk", "lsof", "lspci", "make", "man", "mapfile", "mkdir", "mkfifo", "mkfile", 
"mkisofs", "mknod", "mktemp", "mmv", "more", "most", "mount", "mtools", "mtr", "mv", 
"nc", "netstat", "nice", "nl", "nohup", "notify-send", "nslookup", "op", "open", 
"passwd", "paste", "pathchk", "perf", "pgrep", "ping", "pkill", "popd", "pr", 
"printcap", "printenv", "printf", "ps", "pushd", "pv", "pwd", "quota", "quotacheck", 
"ram", "rar", "rcp", "read", "readarray", "readonly", "reboot", "remsync", "rename", 
"renice", "return", "rev", "rm", "rmdir", "rsync", "scp", "screen", "sdiff", "sed", 
"select", "seq", "set", "sftp", "shift", "shopt", "shutdown", "sleep", "slocate", 
"sort", "source", "split", "ss", "ssh", "stat", "strace", "su", "sudo", "sum", 
"suspend", "sync", "tail", "tar", "tee", "test", "then", "time", "timeout", "times", 
"top", "touch", "tput", "tr", "traceroute", "trap", "true", "tsort", "tty", "type", 
"typeset", "ulimit", "umask", "umount", "unalias", "uname", "unexpand", "uniq", 
"units", "unrar", "unset", "unshar", "until", "uptime", "useradd", "userdel", 
"usermod", "users", "uudecode", "uuencode", "v", "vdir", "vi", "vmstat", "w", 
"wait", "watch", "wc", "wget", "whereis", "which", "while", "who", "whoami", 
"write", "xargs", "xdg-open", "xz", "yes" );
 
// Build list of shell parameters
local TKeywordList parameterList = HighlightBuildKeywordList( HIGHLIGHT_WHOLEWORD,
"$*", "$@", "$#", "$?", "$-", "$$", "$!", "$_", 
"$0", "$1", "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9" );

// Main function to apply syntax highlighting to a line of text.
//  flags is preserved between lines and allows us to do multi-line comments.
void HighlightLineRealtime( int64 line, wchar_t text[], int foreColors[], int backColors[], int count, ushort &flags )
{
    int i, len, pos, rule = flags;
    while( i < count )
    {  
        // Check single-line comments
        if( (text[i] == '#') &&
            HighlightCheckCommentRule( text, count, "#", i, 
            foreColors, backColors, commentStyle ) ) 
            continue;

        // Check double-quote string
        if( (text[i] == '"') &&
            HighlightCheckSingleLineRule( text, count, "\"", "\"", i, 
            foreColors, backColors, stringStyle, HIGHLIGHT_CSTRING ) ) 
            continue;

        // Check single-quote string
        if( (text[i] == '\'') &&
            HighlightCheckSingleLineRule( text, count, "\'", "\'", i, 
            foreColors, backColors, stringStyle, HIGHLIGHT_CSTRING ) ) 
            continue;

        // Check keywords
        if( HighlightCheckKeywordRule( text, count, keywordList, i, 
            foreColors, backColors, keywordStyle ) )
            continue;

        // Check shell parameters
        if( HighlightCheckKeywordRule( text, count, parameterList, i, 
            foreColors, backColors, dataTypeStyle ) )
            continue;

        // Nothing found - skip over whole words
        i = HighlightGetNextToken( text, count, i );
    }

    // Save rule in the flags for the next line
    flags = rule;
}
