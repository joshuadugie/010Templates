//------------------------------------------------
//--- 010 Editor v2.1.3 Binary Template
//
//      File: SHP.bt
//   Authors: A Norman
//   Version: 1.2
//   Purpose: Parses ESRI shp files. 
//  Category: GIS
// File Mask: *.shp
//  ID Bytes: 
//   History: 
//   1.2   2016-08-11 M. Nicke: Updated records for MultiPatchType
//   1.1   2016-01-29 SweetScape: Updated header for repository submission, fixed reading records to the end of the file.
//   1.0   A Norman: Initial release.
//------------------------------------------------

typedef struct point_s {double X; double Y;} POINT;
typedef enum patchtype_e {
            TriangleStrip = 0,
            TriangleFan = 1,
            OuterRing = 2,
            InnerRing = 3,
            FirstRing = 4,
            Ring = 5} patchType;

string GetByteSize(int wordSize)
{
string s;
SPrintf(s, "%d", 2*wordSize);
return s;
}

struct ESRI_SHAPE {
	SetBackColor(cLtGreen);
	struct HEADER {
		BigEndian();
		int	fileCode;
		int	unused[5];
		int	fileLength <read=GetByteSize>;
		LittleEndian();
		int	version;
		enum ShapeEnum {
			NullShape,
			Point,
			PolyLine=3,
			Polygon=5,
			MultiPoint=5,
			PointZ=11,
			PolyLineZ=13,
			PolygonZ=15} shapeType;
		double	Xmin;
		double	Ymin;
		double	Xmax;
		double	Ymax;
		double	Zmin;
		double	Zmax;
		double	Mmin;
		double	Mmax;
	} header;
	SetBackColor(cLtGray);

	struct RECORD {
		BigEndian();
		int	recordNumber;
		int	contentLength <read=GetByteSize>;
		LittleEndian();
		enum ShapeTypeEnum {
			NullShapeType,
			PointType,
			PolyLineType=3,
			PolygonType=5,
			MultiPointType=8,
			PointZType=11,
			PolyLineZType=13,
			PolygonZType=15,
			MultiPointZType=18,
			PointMType=21,
			PolyLineMType=23,
			PolygonMType=25,
			MultiPointMType=28,
			MultiPatchType=31}	shapeType;
		if (shapeType == 1)
		{
			POINT location;
		}
		else if (shapeType == 3)
		{
			double 	box[4];
			int	numParts;
			int	numPoints;
			int	parts[numParts];
			POINT   points[numPoints];
		}
		else if (shapeType == 5)
		{
			double	box[4];
			int	numParts;
			int	numPoints;
			int	parts[numParts];
			POINT	points[numPoints];
		}
		else if (shapeType == 31)
        {
            double  box[4];
			int	numParts;
			int	numPoints;
			int	Parts[numParts];
            patchType PartTypes[numParts];
			POINT	points[numPoints];
    		double	Zmin;
	    	double	Zmax;
            double  ZArray[numPoints];
            double	Mmin;
	    	double	Mmax;
            double  MArray[numPoints];
        }
	};

    while( !FEof() )
        RECORD record;

} esri_shape;